on:
    pull_request:
        paths:
            - '**.php'
            - '**.yaml'
            - 'composer.json'
            - 'composer.lock'
            - '!engine/**'
name: Review PHP
jobs:
    php-test-composer-install:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                php: ['7.4']
        name: Validate composer (${{ matrix.php}})
        steps:
            - uses: actions/checkout@v2

            - name: Setup PHP, with composer and extensions
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php}}
                  extensions: apcu, ctype, iconv, json, redis, xmlreader, zip
                  coverage: none

            - name: Get composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"
            - uses: actions/cache@v1
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: ${{ matrix.php }}-composer-

            - name: Validate composer files
              run: composer validate composer.json

            - name: Composer install with exported .env variables
              run: |
                  set -a && source .env && set +a
                  APP_ENV=prod composer install --no-dev -o

    runner-phpcs:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                php: ['7.4']
        name: Coding style (${{ matrix.php }})
        steps:
            - uses: actions/checkout@v2

            - name: Setup PHP, with composer and extensions
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  extensions: apcu, ctype, iconv, json, redis, xmlreader, zip
                  coverage: none

            - name: Install Reviewdog
              run: wget -O - -q https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh| sh -s -- -b $PWD/ v0.9.14

            - name: Get composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"
            - uses: actions/cache@v1
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: ${{ matrix.php }}-composer-

            - name: Install Dependencies
              run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

            - name: PHPCS
              run: composer actions/phpcs | ./reviewdog -f=checkstyle -name=PHPCS -reporter=github-pr-check
              env:
                  REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    phpcsfixer:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                php: ['7.4']
        name: Coding style fixer (${{ matrix.php }})
        steps:
            - uses: actions/checkout@v2

            - name: Setup PHP, with composer and extensions
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  extensions: apcu, ctype, iconv, json, redis, xmlreader, zip
                  coverage: none

            - name: Get composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"
            - uses: actions/cache@v1
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: ${{ matrix.php }}-composer-

            - name: Install Dependencies
              run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

            - name: phpcsfixerr
              run: composer actions/phpcsfixer

    doctrine:
        runs-on: ubuntu-latest
        services:
            mariadb:
                image: mariadb:10.3
                ports:
                    - 3306
                env:
                    MYSQL_USER: db
                    MYSQL_PASSWORD: db
                    MYSQL_DATABASE: db
                    MYSQL_ROOT_PASSWORD: password
                options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
        strategy:
            fail-fast: false
            matrix:
                php: ['7.4']
        name: Validate database schema (${{ matrix.php }})
        env:
            MARIA_DB_PORT: ${{ job.services.mariadb.ports[3306] }}
        steps:
            - uses: actions/checkout@v2

            - name: Setup PHP, with composer and extensions
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  extensions: apcu, ctype, iconv, json, redis, xmlreader, zip
                  coverage: none

            - name: Get composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"
            - uses: actions/cache@v1
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: ${{ matrix.php }}-composer-

            - name: Install Dependencies
              run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

            - name: Verify MariaDB connection
              run: |
                while ! mysqladmin ping -h"127.0.0.1" -P"MARIA_DB_PORT" --silent; do
                    sleep 1
                done

            - name: Setup tmate session
              uses: mxschmitt/action-tmate@v2

            - name: Run Doctrine Migrations
              run: DATABASE_URL=mysql://db:db@127.0.0.1:$MARIA_DB_PORT/db php bin/console doctrine:migrations:migrate --no-interaction

            - name: Validate DB schema
              run: DATABASE_URL=mysql://db:db@127.0.0.1:$MARIA_DB_PORT/db php bin/console doctrine:schema:validate
